#Import Libraries
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import confusion_matrix
from sklearn.impute import SimpleImputer
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
#----------------------------------------------------

# data

dataset=pd.read_excel(
    r'C:\Users\tarek\Desktop\jaPAN\sham.xlsx', encoding='utf-8-sig')

X = dataset.iloc[:, 0]
y = dataset.iloc[:, 1]

print('x >>>>>\n : ' , X)
print('y >>>>>: \n' , y)

#----------------------------------------------------




















#Splitting data

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=44, shuffle =True)

print('X_train shape is ' , X_train.shape)
print('X_test shape is ' , X_test.shape)
print('y_train shape is ' , y_train.shape)
print('y_test shape is ' , y_test.shape)





# ------------------------tfidf--------------------
count_vect= TfidfVectorizer()
X_train_counts = count_vect.fit_transform(X_train)
w=X_train_counts.toarray()

X_test_counts=count_vect.fit_transform(X_test)
ww=X_test_counts.toarray()

dataframeTrain=pd.DataFrame(w)
dataframeTest=pd.DataFrame(ww)

print(dataframeTrain)
print(dataframeTest)















#----------------------------------------------------
#Applying GaussianNB Model 


GaussianNBModel = GaussianNB()
GaussianNBModel.fit(dataframeTrain, y_train)
#Calculating Details
print('\ Train Score is : ' , GaussianNBModel.score(dataframeTrain, y_train))
GaussianNBModel.fit(dataframeTest, y_test)

print('GaussianNBModel Test Score is : ' , GaussianNBModel.score(dataframeTest, y_test))
print('----------------------------------------------------')
#Calculating Prediction
y_pred = GaussianNBModel.predict(dataframeTest)
y_pred_prob = GaussianNBModel.predict_proba(dataframeTest)
print('Predicted Value for GaussianNBModel is : ' , y_pred[:10])
print('Prediction Probabilities Value for GaussianNBModel is : ' , y_pred_prob[:10])

#----------------------------------------------------
#Calculating Confusion Matrix
CM = confusion_matrix(y_test, y_pred)
print('Confusion Matrix is : \n', CM)

# drawing confusion matrix
sns.heatmap(CM, center = True)
plt.show()
